📋 Valid4.py 검증 로직 (Y 라벨 자동 생성)

═══════════════════════════════════════════════════════════════

Phase 0: 자동 라벨링 (크롤링 데이터 기반) - 최우선 처리
───────────────────────────────────────────────────────────
Step 0-1: 크롤링 참조 데이터 로드
 - center_crawling_result_20250809_190826.xlsx 로드 (3,552개 주민센터 정보)
 - 전화번호 → 센터명 매핑 딕셔너리 생성
 - 팩스번호 → 센터명 매핑 딕셔너리 생성

Step 0-2: failed_data 전화번호 매칭
 - failed_data의 전화번호를 크롤링 데이터와 완전 매칭
 - 매칭 성공 → "실제 기관명(전화)" 컬럼에 센터명 자동 입력
 - 매칭 실패 → Phase 1으로 이동

Step 0-3: failed_data 팩스번호 매칭  
 - failed_data의 팩스번호를 크롤링 데이터와 완전 매칭
 - 매칭 성공 → "실제 기관명(팩스)" 컬럼에 센터명 자동 입력
 - 매칭 실패 → Phase 1으로 이동

예상 성과: 70-80% 데이터 자동 라벨링 완료

═══════════════════════════════════════════════════════════════

Phase 1: 웹 검색 기반 라벨링 (Phase 0 매칭 실패 케이스)
───────────────────────────────────────────────────────────
Step 1-1: 지역번호 유효성 검증
 - 지역번호와 시도 정보 매칭 확인
 - 불일치 시 "지역번호 오류" 플래그 설정

Step 1-2: 구글 검색 (전화번호/팩스번호 → 기관명)
 - "{전화번호} 주민센터" 구글 검색
 - "{팩스번호} 주민센터" 구글 검색
 - Exceptional Chromedriver(User-agent 회피) 사용
 - 검색 결과 스니펫에서 관련 링크 수집 (최대 5개)

Step 1-3: 백업 검색 엔진 활용
 - 구글 검색 결과가 없는 경우 Naver, Daum 검색
 - HTTP 응답 요청을 통한 검색 결과 수집

Step 1-4: 링크 크롤링 및 정보 추출
 - 병렬 크롤러 활성화 (멀티 워커)
 - 각 링크 접속 → bs4/js렌더링으로 데이터 수집
 - "TEL", "FAX", "전화", "팩스" 등 키워드 주변 텍스트 파싱
 - 기관명, 연락처 정보 구조화

Step 1-5: AI 기반 기관명 추출
 - 수집된 데이터를 AI에 입력
 - 컨텍스트 분석을 통한 정확한 기관명 도출
 - 신뢰도 점수 계산 (0-100점)

Step 1-6: 최종 검증 및 라벨링
 - 추출된 기관명의 신뢰도가 70점 이상인 경우 자동 라벨링
 - 70점 미만인 경우 "수동 확인 필요" 라벨 부여

═══════════════════════════════════════════════════════════════

Phase 2: 품질 관리 및 결과 출력
───────────────────────────────────────────────────────────
Step 2-1: 교차 검증
 - Phase 0과 Phase 1 결과 비교
 - 불일치 케이스 검토 및 신뢰도 재계산

Step 2-2: 최종 결과 분류
 - "자동 라벨링 완료" (Phase 0 성공)
 - "웹 검색 라벨링 완료" (Phase 1 성공)  
 - "수동 확인 필요" (검증 실패)
 - "데이터 오류" (지역번호 불일치 등)

Step 2-3: 통계 및 리포트 생성
 - 자동 라벨링 성공률
 - 웹 검색 필요 비율
 - 수동 확인 필요 비율
 - 처리 시간 및 성능 지표  